JAVA
개요
썬 마이크로시스템즈에서 1995년에 개발한 객체 지향 프로그래밍 언어. 창시자는 제임스 고슬링이다. 2010년에 오라클이 썬 마이크로시스템즈를 인수하면서 Java의 저작권을 소유하였다. 현재는 OpenJDK는 GPL2이나 오라클이 배포하는 Oracle JDK는 상업라이선스로 2019년 1월부터 유료화정책을 강화하고 있다. Java EE는 이클립스 재단의 소유이다. Java 언어는 J2SE 1.4부터는 Java Community Process (JCP)에서 개발을 주도하고 있다.

C#과 문법적 성향이 굉장히 비슷하며, 그에 비해 2019년 Q3에서 가장 많이 이용하는 언어로 뽑혔다.

분류
Java는 크게 다음과 같은 3가지 에디션으로 나뉜다.
Java SE(Java Standard Edition / J2SE)
대부분의 사람들이 가장 많이 접하는 표준 에디션. Java의 핵심 API와 기능들을 제공한다. JDK 항목도 참고.
Jakarta EE, 구 Java EE(Java Enterprise Edition / J2EE)
기업에서 운영하는 서버 페이지에 특화된 에디션이다. JSP와 서블릿을 비롯한 웹 애플리케이션 서버에 관련된 기술들이 포함되어 있다.
Java ME(Java Micro Edition / J2ME)
피처폰, PDA, 셋톱박스, 센서 등의 임베디드 시스템 환경에 특화된 경량 에디션이다.

특징
Java의 가장 큰 특징은 플랫폼에 독립적인 언어라는 점이다. 소스 코드를 기계어로 직접 컴파일하여 링크하는 C/C++의 컴파일러와 달리 자바 컴파일러는 바이트코드인 클래스 파일(.class)을 생성하고, 이 파일의 바이트코드를 읽은 뒤 기계어로 바꾸어 실행하는 것은 자바 가상 머신이다.
예를 들어 플랫폼에 종속된 경우 윈도우에서 빌드한 프로그램을 그대로 리눅스나 macOS에서 실행하는 것은 불가능 하다. 반면 Java로 작성 된 프로그램은 플랫폼에 맞는 자바 가상 머신만 설치되어 있다면 대체로 문제 없이 동작한다. 이는 바이트 코드가 플랫폼이 아닌 자바 가상 머신에서 실행가능하며, 프로그램 실행의 주체가 운영 체제가 아닌 자바 가상 머신이기 때문이다. 이러한 점을 일컬어 플랫폼에 독립적이라고 한다.
이와 같이 장점으로 내세우는 '플랫폼 독립성'이라는 것이 C/C++로 쓰여진 자바 가상머신의 이식성을 통해서 이루어진 것이라, 실상은 자바 가상 머신에 심하게 종속된 언어이고, C/C++의 이식성을 초월하지 못한다. 따라서 Java의 플랫폼 독립성은 항상 '플랫폼에 맞는 자바 가상 머신만 설치되어 있다면'이라는 가정이 필요하다. 그러나 플랫폼이 바뀌어도 어쨌든 재컴파일하지 않아도 바이너리를 그대로 쓸 수 있다는 것은 이전의 프로그래밍 언어에는 없는 특징이다.

Python
개요
파이썬은 1991년에 귀도 반 로섬(Guido van Rossum)에 의해 만들어진 인터프리터 프로그래밍 언어이다. 직관적이고 쉬우며 특징과 다양하고 풍부한 라이브러리들을 바탕으로 한 강력한 생태계를 가지고 있어 프로그래밍 교육, 인공지능, 데이터 분석 및 빅데이터, 백엔드, 프론트엔드, 웹 스크래핑 등 다양한 분야에서 사용되며, 이에 힘입어 2023 TIOBE 인덱스 기준 프로그래밍 언어 순위 1위이기도 하다.
Python 서문에 따르면 파이썬은 1989년 크리스마스에, 귀도가 취미 프로젝트로 시작하였다. Python이라는 이름은 귀도가 즐겨 보던 영국의 6인조 코미디 그룹 몬티 Python에서 이름을 따왔다.
실행할 수 있는 의사 코드(Executable pseudocode)라고 불릴 정도로 문법이 단순하며 매우 미려하다. 때문에 초보자들이 프로그래밍을 할 때 많이 추천하는 언어이기도 하다. 그럼에도 사용률과 생산성, 실무에서의 사용성도 높기에 실무에서도 활발하게 사용되고 있다. 이는 APL이나 BASIC과 같은 교육용으로 사용되는 다른 언어들과의 차별점이기도 하다.

신속한 개발 속도
Python의 아이덴티티. 높은 생산성은 그 무엇과도 비교할 수 없는 Python만의 특징이다. 쉬우면서도 다양한 패키지 생태계를 통한 범용성까지 갖춘 프로그래밍 언어는 찾기 힘들다.
인터프리터 언어이고 우수한 자료형과 다양한 모듈 등을 기본으로 제공해 개발 기간이 단축되는 것이 특징.
파이썬은 다른 언어와 함께 잘 작동하며, 이와 같은 특성 때문에 glue language라고 불리기도 한다.
예를 들어 C++로 구현되어 있지만 파이썬에서 사용할 수 있는 OpenCV나 C와 C++로 구현된 NumPy, Rust로 구현된 Ruff 등 다른 언어로 구현된 후 파이썬으로 사용할 수 있도록 만들어진 라이브러리는 파이썬 생태계에서 중요한 축을 담당한다.
이러한 패키지들은 파이썬의 높은 생산성의 장점은 그대로 가지면서 동시에 높은 속도까지 가질 수 있어 장점이 많다.

과학 및 공학 친화성
Python은 과학과 공학 분야에서 필요한 여러 기능을 기본적으로 제공한다. 정수의 크기에 제한이 없으며[13], 또한 놀랍게도 허수를 별도의 import까지도 필요없는 기본 타입으로 지원하며, 표준 라이브러리의 decimal, fractions 모듈을 사용해 소수점과 유리수를 정밀하게 다룰 수 있다. 이러한 기능을 다루는 암호학과 통계 분야에서 쓰기에 알맞다.
Python 생태계 또한 공학 및 과학 분야를 다양하게 지원한다. 복잡한 수치와 큰 데이터를 다루는 연산에 알맞은 NumPy, SciPy, pandas, 데이터를 그래프로 시각화하는 Matplotlib, 코드와 데이터를 함께 다룰 수 있는 Jupyter Notebook 등의 강력한 패키지와 도구들을 무료로 사용할 수 있다. 이 점 때문에 막대한 라이센스 비용을 지불해야 하는 MATLAB의 많은 사용자들이 파이썬으로 넘어오게 되기도 하였다. 이는 파이썬이 풍부한 개발자 풀을 지니게 되는 단초가 되기도 하였다.
Python 개발자들도 이러한 사실을 잘 알고 있기 때문에 언어 차원에서 관련 패키지를 위한 기능을 제공하기도 한다. 행렬곱(@) 연산자가 대표적인 예인데, 파이썬 stdlib에서는 사용하지 않지만 NumPy 등에서 자주 사용된다는 이유로 추가될 수 있었다. 자세한 내용은 PEP 465에 잘 설명되어 있다. 해당 문서에 따르면 NumPy는 math 모듈보다도 1.5배 가량 더 사용되고, 비트 연산자들에 비해 행렬곱이 더 잘 사용된다고 설명한다.

C
개요
1972년에 벨 연구소(Bell Labs)의 데니스 리치[5]가 만든 범용(general-purpose) 프로그래밍 언어. 원래 명칭은 그냥 'C'지만 한국에서는 'C언어'라는 명칭으로 주로 부른다. 영미권에서도 Clang이라고 부르는 사례가 있다. 세계적으로 많이 쓰이는 프로그래밍 언어 중 하나이다.

사용분야
C언어는 다음과 같은 분야에서 사용되며, 일반 사용자의 눈에 보이지 않는 컴퓨터 산업의 기반이 되는 곳에서 주로 쓰인다.
-운영체제 및 디바이스 드라이버
-마이크로컨트롤러
-임베디드 시스템
-암호학 라이브러리[11]
-프로그래밍 언어 인터프리터(CPython 등)
-웹 서버(Apache 등)
-데이터베이스(PostgreSQL 등)
-애플리케이션
이외에 매우 빠른 계산 속도가 필요한 프로그램이나 라이브러리

설명
C언어 자체는 지원되는 기능이 적고 문법이 간단하다. 객체 지향 프로그래밍(OOP)이나 코루틴, 클로저, 메타 프로그래밍 등 고수준의 기능들을 지원하는 언어들과 비교하면 특히나 그렇다. 550쪽 정도밖에 안 되는 C언어 표준에서도 순수 문법 부분은 200쪽 정도밖에 안 되며 나머지는 다 라이브러리 관련 부분이고, 함수의 개수로 치면 고작해야 150개 근처이다. 수천 개나 되는 기본 라이브러리를 지원하는 다른 언어들과 비교하면 정말 작고 간단하다. 초반의 포인터 장벽만 넘는다면 문법 자체를 마스터하고 간단한 커맨드라인 프로그래밍을 할 수 있는 수준까지는 엄청 쉽다.
하지만 기능이 적다고 결코 쉬운 건 아니다. 프로그래밍을 할 때 지원하는 기능이 적다고 그 적은 기능만 쓸 수는 없다. 따라서 기본 라이브러리에서 지원하지 않는 기능은 결국 프로그래머가 직접 구현해서 써야 하는데, 1970년대 이후 프로그래밍 언어계에서 오늘날 영어와 같은 위치를 차지하고 있던 덕분에 그런 기능의 구현이나 최적화에 관한 많은 트릭들이 존재하고 이것을 얼마나 많이 알고 있는 가가 사실 C언어의 핵심이다.
오늘날 고수준 언어들이 다수의 프로그래머가 함께 개발하는 것을 염두에 두고 팀에 누가 될 만한 위험하거나 생산성에 저해되는 부분들을 언어 차원에서 강제로 제외시키는 경향이 있다면, C언어는 이런 부분을 완전히 개방했다. 초기 C언어는 커다란 규모의 프로그램을 거의 염두에 두지 않고 개발됐다. 당시 IBM 메인 프레임에 사용되던 System/360이 수천 명의 프로그래머가 달라붙어 어셈블리어로 수백 만 줄이었는데, C언어로 만들어진 가장 큰 프로그램인 초창기 유닉스의 커널은 고작 만 줄 정도였다. 상황이 이렇다 보니 같은 프로그램이라도 프로그래머의 지식 수준과 능력에 따라 퀄리티 차이가 그야말로 극과 극으로 벌어지는 언어이다. 리눅스 등 C언어로 작성된 대규모 오픈소스 프로젝트를 보면 C언어 활용의 예술을 볼 수 있다. 방대한 양의 코드를 함수, 구조체, 포인터, 매크로만을 이용해서 철저히 모듈 단위로 잘 관리하고 있다.
어떤 언어든 그 실력을 충분히 발휘하려면 주로 쓰이는 분야에서 사용하게 되는 기술을 익혀야 하는데, C언어의 주 사용 분야라는 것이 하필 기계 제어. 제대로 사용하려면 프로그래머들이 보통 싫어하는 하드웨어와 어셈블리어에도 결국 손을 대야 한다.
일반적인 프로그래밍도 역시 가능하지만, 그런 용도로는 더 적합한 언어들이 널려 있다. 2010년대부터는 데스크톱 애플리케이션보다 웹, 스마트폰 애플리케이션의 활용도가 높아져서, 하드웨어 컨트롤이나 성능이 중요한 분야[7]가 아니면 C언어를 써야 할 이유가 거의 없다. 즉, 초심자가 C언어를 배우는 것까지는 문제가 없지만 배우고 나서 뭔가 제대로 할만한 건 사실상 없다. 그리고, 바로 그렇기 때문에 프로그래밍 입문용 언어의 자리도 해외 기준으로는 대부분 Java나 Python으로 대체됐다. 또한 데스크톱 애플리케이션도 HTML/CSS/JavaScript를 이용하는 Electron 프레임워크가 나오면서 예전보다 개발이 훨씬 쉬워졌다.[8]

















